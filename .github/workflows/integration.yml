name: Run Integration Tests
on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'
jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: ${{secrets.DATABASE_URL}}
      PYTHONPATH: ./backend
      POSTGRES_USER: ${{secrets.POSTGRES_USER}}
      POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
      POSTGRES_DB: ${{secrets.POSTGRES_DB}}
      POSTGRES_SERVER: ${{secrets.POSTGRES_SERVER}}
      POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ENCRYPTION_KEY: ${{secrets.ENCRYPTION_KEY}}
      # used in fastapi, academic API Keys
      SCIENCEDIRECT_APIKEY: ${{secrets.SCIENCEDIRECT_APIKEY}}
      SCOPUS_APIKEY: ${{secrets.SCOPUS_APIKEY}}
      NEXT_PUBLIC_ADMIN_USER: ${{ secrets.NEXT_PUBLIC_ADMIN_USER }}
      NEXT_PUBLIC_ADMIN_PASS: ${{ secrets.NEXT_PUBLIC_ADMIN_PASS }}
      #used in AR-3 tests
      DOMAIN: scrapescholar.me
      TEST_USER: ${{ secrets.TEST_USER}}
      TEST_PASSWORD: ${{secrets.TEST_PASSWORD}}
    services:
      postgres:
        image: postgres:latest
        env:
          PYTHONPATH: ./backend
          DATABASE_URL: ${{secrets.DATABASE_URL}}
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DB: ${{secrets.POSTGRES_DB}}
          POSTGRES_SERVER: ${{secrets.POSTGRES_SERVER}}
          POSTGRES_PORT: ${{secrets.POSTGRES_PORT}}
          SECRET_KEY: ${{secrets.SECRET_KEY}}
          ENCRYPTION_KEY: ${{secrets.ENCRYPTION_KEY}}       
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U student" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    - name: Check out repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: ./backend  # Adjust to the correct directory
      run: |
        pip install -r requirements.txt

    - name: Wait for PostgreSQL to be ready
      run: |
        until pg_isready -h ${{secrets.POSTGRES_SERVER}} -p 5432 -U student; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 5
        done
    - name: Run init_db script  
      run: python backend/app/init_db.py

    - name: Run FastAPI Server
      working-directory: ./backend  # Adjust to the correct directory
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 & sleep 5
        curl -X GET http://0.0.0.0:8000/health_check

    - name: Install Chrome and ChromeDriver
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        sudo apt-get install -y chromium-chromedriver

    - name: Run npm install
      working-directory: ./client/scrapescholar_client  # Adjust to the correct directory
      run: npm install

    - name: Run Build && unit tests
      working-directory: ./client/scrapescholar_client  # Adjust to the correct directory
      run: | 
        npm run build
        
    - name: Run NPM dev
      working-directory: ./client/scrapescholar_client  # Adjust to the correct directory
      run: | 
        npm run dev & sleep 10

    - name: Run Python Integration Tests
      working-directory: ./backend  # Adjust to the correct directory
      env:
        DISPLAY: :99  
      run: |
        Xvfb :99 -screen 0 1920x1080x24 &
        pytest ./tests/integration --disable-warnings -v -s

    # - name: run Integration tests Next.js 
    #   working-directory: ./client/scrapescholar_client  # Adjust to the correct directory
    #   run: npm run test:integration

    # these three tests reach out to real domain and test ssl validity for AR-3
    - name: test ssl
      run: |
        curl https://$DOMAIN

    - name: test http redirection to https
      run: |

        # Perform an HTTP request and follow redirects
        REDIRECTS=$(curl -I -L -s -w "%{http_code} %{url_effective}\n" http://$DOMAIN)

        # Extract HTTP status code and final URL from last line of output
        STATUS_CODE=$(echo "$REDIRECTS" | tail -n 1 | awk '{print $1}')
        FINAL_URL=$(echo "$REDIRECTS" | tail -n 1 | awk '{print $2}')

        # Print status code and final redirected url for debugging purposes
        echo "Status Code: $STATUS_CODE"
        echo "Final URL: $FINAL_URL"

        # check if final url is https, and status code is 200, otherwise exit with 1 
        if [[ "$FINAL_URL" == https://*  &&  "$STATUS_CODE" -eq 200 ]]; then
            echo "Redirection from HTTP to HTTPS is working correctly."
        else
            echo "Redirection does not go to HTTPS."
        exit 1
        fi
    - name: test cert not expired
      run: |
        CERT_EXPIRE=$(curl https://$DOMAIN -vI --stderr - | grep "expire date" | awk '{print $4 " " $5 " " $7}')
        CERT_DOMAIN=$(curl https://$DOMAIN -vI --stderr - | grep "subject" | head -n 1|awk '{print $3}'| cut -d'=' -f2)
        TODAY=$(date | awk '{print $2 " " $3 " " $6}')
        CERT_EXPIRE_SECONDS=$(date -d "$CERT_EXPIRE" +%s)
        TODAY_SECONDS=$(date -d "$TODAY" +%s)
        echo "Cert expires $CERT_EXPIRE"
        echo "cert domain $CERT_DOMAIN"
        if [[ $TODAY_SECONDS -lt $CERT_EXPIRE_SECONDS && $CERT_DOMAIN == $DOMAIN ]]; then
          echo "valid"
        else
          echo "not valid"
          echo "expired or domain mismatch"
          exit 1
        fi