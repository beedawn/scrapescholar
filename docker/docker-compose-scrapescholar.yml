services:
  db:
    image: postgres:14
    container_name: container_scrapescholardb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d","${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mynetwork

  init_db:
    build:
      context: ..
      dockerfile: docker/postgres/Dockerfile
    container_name: init_db_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SERVER: ${POSTGRES_SERVER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      DATABASE_URL: ${DATABASE_URL}
    entrypoint: ["./wait-for.sh", "db", "/app/init_db.sh"]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mynetwork

  fastapi:
    build:
      context: ..
      dockerfile: docker/fastapi/Dockerfile
    container_name: fastapi_container
    environment:
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      SCIENCEDIRECT_APIKEY: ${SCIENCEDIRECT_APIKEY}
      SCOPUS_APIKEY: ${SCOPUS_APIKEY}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SERVER: db
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - mynetwork
  
  nginx:
    image: nginx
    # build:
    #   context: .
    #   dockerfile: ../../docker/nginx/Dockerfile  
    volumes:
      - ./nginx_nextjs/templates:/etc/nginx/templates
      - ./nginx_nextjs/default.conf:/etc/nginx/default.conf
      - ./nginx_nextjs/start_nginx.sh:/docker-entrypoint.d/start_nginx.sh
      - ./nginx_nextjs/wait-for-it.sh:/wait-for-it.sh 
      - ./nginx_nextjs/certbot/conf/:/etc/nginx/ssl/:ro
    ports:
      - "80:80"
      # - "443:443"
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80
    depends_on:
      - nextjs
      #need to chmod +x start_nginx.sh
    entrypoint: ["/bin/sh", "-c", "/wait-for-it.sh nextjs:3000 -- /docker-entrypoint.d/start_nginx.sh"]
    networks:
      - mynetwork
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./nginx_nextjs/certbot/www/:/var/www/certbot/:rw
      - ./nginx_nextjs/certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - mynetwork





  nextjs:
    # image: node:20 
    build:
      context: ../client/scrapescholar_client  
      dockerfile: ../../docker/nextjs/Dockerfile 
    working_dir: /app
    volumes:
      - ../client/scrapescholar_client:/app

    #only need if you want to expose port 3000 and bypass nginx proxy
    #ports:
      #- "3000:3000"
  
    command: "npm run dev -- --hostname 0.0.0.0"  #  "npm start" for production
    environment:
      - NODE_ENV=development  # "production" for production builds
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
  
  
  


  

volumes:
  db_data: